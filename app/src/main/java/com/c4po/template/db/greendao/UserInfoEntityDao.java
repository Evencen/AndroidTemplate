package com.c4po.template.db.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import com.c4po.template.db.table.UserInfoEntity;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "USER_INFO_ENTITY".
*/
public class UserInfoEntityDao extends AbstractDao<UserInfoEntity, Void> {

    public static final String TABLENAME = "USER_INFO_ENTITY";

    /**
     * Properties of entity UserInfoEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property UserId = new Property(0, String.class, "userId", false, "USER_ID");
        public final static Property UserName = new Property(1, String.class, "userName", false, "USER_NAME");
        public final static Property Gender = new Property(2, String.class, "gender", false, "GENDER");
        public final static Property IcCardNumber = new Property(3, String.class, "icCardNumber", false, "IC_CARD_NUMBER");
        public final static Property CommunityName = new Property(4, String.class, "communityName", false, "COMMUNITY_NAME");
        public final static Property BuildingNumber = new Property(5, String.class, "buildingNumber", false, "BUILDING_NUMBER");
        public final static Property RoomNumber = new Property(6, String.class, "roomNumber", false, "ROOM_NUMBER");
        public final static Property DeviceId = new Property(7, String.class, "deviceId", false, "DEVICE_ID");
        public final static Property LastEnterTime = new Property(8, long.class, "lastEnterTime", false, "LAST_ENTER_TIME");
    }


    public UserInfoEntityDao(DaoConfig config) {
        super(config);
    }
    
    public UserInfoEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_INFO_ENTITY\" (" + //
                "\"USER_ID\" TEXT," + // 0: userId
                "\"USER_NAME\" TEXT," + // 1: userName
                "\"GENDER\" TEXT," + // 2: gender
                "\"IC_CARD_NUMBER\" TEXT," + // 3: icCardNumber
                "\"COMMUNITY_NAME\" TEXT," + // 4: communityName
                "\"BUILDING_NUMBER\" TEXT," + // 5: buildingNumber
                "\"ROOM_NUMBER\" TEXT," + // 6: roomNumber
                "\"DEVICE_ID\" TEXT," + // 7: deviceId
                "\"LAST_ENTER_TIME\" INTEGER NOT NULL );"); // 8: lastEnterTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_INFO_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserInfoEntity entity) {
        stmt.clearBindings();
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(1, userId);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(2, userName);
        }
 
        String gender = entity.getGender();
        if (gender != null) {
            stmt.bindString(3, gender);
        }
 
        String icCardNumber = entity.getIcCardNumber();
        if (icCardNumber != null) {
            stmt.bindString(4, icCardNumber);
        }
 
        String communityName = entity.getCommunityName();
        if (communityName != null) {
            stmt.bindString(5, communityName);
        }
 
        String buildingNumber = entity.getBuildingNumber();
        if (buildingNumber != null) {
            stmt.bindString(6, buildingNumber);
        }
 
        String roomNumber = entity.getRoomNumber();
        if (roomNumber != null) {
            stmt.bindString(7, roomNumber);
        }
 
        String deviceId = entity.getDeviceId();
        if (deviceId != null) {
            stmt.bindString(8, deviceId);
        }
        stmt.bindLong(9, entity.getLastEnterTime());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserInfoEntity entity) {
        stmt.clearBindings();
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(1, userId);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(2, userName);
        }
 
        String gender = entity.getGender();
        if (gender != null) {
            stmt.bindString(3, gender);
        }
 
        String icCardNumber = entity.getIcCardNumber();
        if (icCardNumber != null) {
            stmt.bindString(4, icCardNumber);
        }
 
        String communityName = entity.getCommunityName();
        if (communityName != null) {
            stmt.bindString(5, communityName);
        }
 
        String buildingNumber = entity.getBuildingNumber();
        if (buildingNumber != null) {
            stmt.bindString(6, buildingNumber);
        }
 
        String roomNumber = entity.getRoomNumber();
        if (roomNumber != null) {
            stmt.bindString(7, roomNumber);
        }
 
        String deviceId = entity.getDeviceId();
        if (deviceId != null) {
            stmt.bindString(8, deviceId);
        }
        stmt.bindLong(9, entity.getLastEnterTime());
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public UserInfoEntity readEntity(Cursor cursor, int offset) {
        UserInfoEntity entity = new UserInfoEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // userId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // gender
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // icCardNumber
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // communityName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // buildingNumber
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // roomNumber
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // deviceId
            cursor.getLong(offset + 8) // lastEnterTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserInfoEntity entity, int offset) {
        entity.setUserId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setUserName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setGender(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setIcCardNumber(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCommunityName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setBuildingNumber(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setRoomNumber(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setDeviceId(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setLastEnterTime(cursor.getLong(offset + 8));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(UserInfoEntity entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(UserInfoEntity entity) {
        return null;
    }

    @Override
    public boolean hasKey(UserInfoEntity entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
